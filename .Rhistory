result <- c(list(h=h),predict)
return(result)
})
errors <- sapply(groups,function(i)plist[[i]]$error)
orders <- order(errors)
result <- plist[[groups[orders==1]]]
return(list(errors=errors,orders=orders,pred=result))
}
result <- kpredict(data[1:2000,"close"],hs=seq(100,101),k=100,n.ahead=3,min.cor=0.5)
result
result <- kpredict(data[1:2000,"close"],hs=seq(100,150),k=100,n.ahead=3,min.cor=0.5)
result
result <- kpredict(data[1:2000,"close"],hs=seq(100,150),k=100,n.ahead=3,min.cor=0.5)
result$pred$estimate
data[2001:2003,"close"]
result$pred$estimate["pred",]
mean((result$pred$estimate["pred",]-data[2001:2003,"close"])^2)
result$pred$estimate["pred",]-data[2001:2003,"close"]
result <- kpredict(data[1:2000,"close"],hs=seq(100,120),k=50,n.ahead=1,min.cor=0.5)
result$pred$estimate["pred",]-data[2001:2003,"close"]
mean((result$pred$estimate["pred",]-data[2001:2003,"close"])^2)
result
result$pred$estimate["pred",]-data[2001,"close"]
mean((result$pred$estimate["pred",]-data[2001,"close"])^2)
mean(abs(result$pred$estimate["pred",]-data[2001,"close"]))
result <- kpredict(data[1:2000,"close"],hs=seq(100,120),k=60,n.ahead=7,min.cor=0.5)
result$pred$estimate["pred",]-data[2001:2007,"close"]
mean(abs(result$pred$estimate["pred",]-data[2001:2007,"close"]))
result <- kpredict(data[1:2000,"close"],hs=seq(100,120),k=60,n.ahead=15,min.cor=0.5)
result$pred$estimate["pred",]-data[2001:2015,"close"]
mean(abs(result$pred$estimate["pred",]-data[2001:2015,"close"]))
cor(result$pred$estimate["pred",],data[2001:2015,"close"])
result <- kpredict(data[1:2000,"close"],hs=seq(100,120),k=60,n.ahead=15,min.cor=0.8)
result$pred$estimate["pred",]-data[2001:2015,"close"]
mean(abs(result$pred$estimate["pred",]-data[2001:2015,"close"]))
cor(result$pred$estimate["pred",],data[2001:2015,"close"])
result
source('D:/Workspaces/kNN/src/classic-knn.R')
# Classic k-nearest neighbor algorithms
data <- read.csv("data/eurusd60.csv",header=F,stringsAsFactors=F)
colnames(data) <- c("date","time","open","high","low","close","volume")
plot(data$close,type="l")
kpredictn <- function(data,k,h,n.ahead,min.cor=0,
output=c("predicts","estimate","error")) {
n <- length(data)
series <- data[(n-h+1):n]
range <- 1:(n-h-n.ahead+1)
cors <- sapply(range,function(i) {
pattern <- data[i:(i+h-1)]
return(cor(pattern,series))
})
abs.cors <- abs(cors)
orders <- order(abs.cors,decreasing=T)
indices <- range[orders<=k & abs.cors>=min.cor]
predicts <- t(sapply(indices,function(i) {
pattern <- data[i:(i+h-1)]
predictor <- data[(i+h):(i+h+n.ahead-1)]
m <- lm(series~pattern)
coeff <- coef(m)
predictor <- coeff[[1]]+coeff[[2]]*predictor
return(predictor)
}))
corsi <- cors[indices]
abs.corsi <- abs(corsi)
estimate <- sapply(1:n.ahead,function(t) {
w <- exp(abs.corsi)
sumw <- sum(w)
preds <- w*predicts[,t]/sumw
pred <- sum(preds)
sd <- sd(preds)
rsd <- sd/abs(pred)
return(c(pred=pred,sd=sd,rsd=rsd))
})
error <- sum(estimate["sd",])
result <- list(predicts=predicts,estimate=estimate,error=error)
return(result[output])
}
kpredict <- function(data,hs,k,n.ahead=1,min.cor=0) {
n <- length(data)
g <- length(hs)
groups <- 1:g
plist <- lapply(hs,function(h) {
predict <- kpredictn(data,h=h,k=k,n.ahead=n.ahead,min.cor=min.cor)
result <- c(list(h=h),predict)
return(result)
})
errors <- sapply(groups,function(i)plist[[i]]$error)
orders <- order(errors)
result <- plist[[groups[orders==1]]]
return(list(errors=errors,orders=orders,pred=result))
}
kvalidate <- function(data,start,hs,k,n.ahead,min.cor=0) {
n <- length(data)
range <- start:(n-n.ahead)
valid <- sapply(range,function(i) {
vdata <- data[1:i]
result <- kpredict(vdata,hs=hs,k=k,n.ahead=n.ahead,min.cor=min.cor)
pred <- result$pred$estimate["pred",]
actual <- data[(i+1):(i+n.ahead)]
residuals <- pred-actual
made <- mean(abs(residuals))
cor <- cor(pred,actual)
return(c(made=made,cor=cor))
})
return(valid)
}
source('D:/Workspaces/kNN/src/classic-knn.R')
kvalidate(data[1:2000,"close"],1900,hs=seq(25,30),k=200,n.ahead=5,min.corr=0.5)
kvalidate(data[1:2000,"close"],1900,hs=seq(25,30),k=200,n.ahead=5,min.cor=0.5)
result1 <- kvalidate(data[1:2000,"close"],1900,hs=seq(25,30),k=200,n.ahead=5,min.cor=0.5)
t(result1)
result <- data.frame(t(result1))
View(result)
hist(result$made)
hist(result$cor)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1500,hs=seq(30,60),k=500,n.ahead=1,min.cor=0.9)
result1 <- kvalidate(data[1:2000,"close"],1500,hs=seq(30,60),k=300,n.ahead=1,min.cor=0.9)
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,60),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,60),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,60),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,60),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,40),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,40),k=300,n.ahead=1,min.cor=0.5)
source('D:/Workspaces/kNN/src/classic-knn.R')
result1 <- kvalidate(data[1:2000,"close"],1200,hs=seq(30,40),k=300,n.ahead=1,min.cor=0.5)
result1 <- kvalidate(data[1:2000,"close"],1800,hs=seq(30,40),k=300,n.ahead=1,min.cor=0)
View(result1)
hist(result1$mde)
hist(result1$made)
hist(result1$mde)
density(result1$mde)
plot(density(result1$mde))
plot(density(result1$made))
qqplot(result1$mde,"norm")
qqplot(result1$mde,"rnorm")
qqplot(result1$mde,"dnorm")
qqplot(result1$mde,dnorm)
qqplot(result1$mde)
qqplot(result1$mde,rnorm(1000))
qqplot(result1$made,rpois(1000,lambda=1))
qqplot(result1$made,rpois(1000,lambda=2))
qqplot(result1$made,rpois(1000,lambda=3))
qqplot(result1$made,rpois(1000,lambda=10))
qqplot(result1$made,rpois(1000,lambda=15))
qqplot(result1$made,rpois(1000,lambda=20))
qqplot(result1$made,rpois(1000,lambda=200))
par(mfrow=c(2,1))
plot(density(result1$mde))
plot(density(result1$mde))
par(mfrow=c(2,1))
par(mfrow=c(1,2))
plot(density(result1$mde))
plot(density(result1$made))
par(mfrow=c(2,1))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
par(mfrow=c(2,1))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
rm(result)
result <- result1
rm(result1)
par(mfrow=c(2,1))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
par(mfrow=c(1,2))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
par(mfrow=c(1,2))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
loadData <- function() {
data <- read.csv("data/eurusd60.csv",header=F,stringsAsFactors=F)
colnames(data) <- c("date","time","open","high","low","close","volume")
plot(data$close,type="l")
}
loadData()
par(mfrow=c(1,1))
plot(data$close,type="l")
t <- 1:1000
data <- 10*sin(t/120*pi)
plot(data,type="l")
par(mfrow=c(1,1))
plot(data,type="l")
data <- 10*sin(t/200*pi)
par(mfrow=c(1,1))
plot(data,type="l")
data <- 10*sin(t/50*pi)
par(mfrow=c(1,1))
plot(data,type="l")
source('D:/Workspaces/kNN/src/classic-knn.R')
loadData2()
test()
kpredictn(data,100,20,1)
loadData2()
loadData2 <- function() {
t <- 1:1000
data <- 10*sin(t/50*pi)
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData2()
kpredictn(data,100,20,1)
result <- test()
test <- function() {
result <- kvalidate(data,900,
hs=seq(15,20),k=100,n.ahead=1,min.cor=0)
par(mfrow=c(1,2))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
return(result)
}
result <- test()
source('D:/Workspaces/kNN/src/classic-knn.R')
source('D:/Workspaces/kNN/src/classic-knn.R')
result <- test()
View(result)
plot(result$pred.pred,result$actual)
plot(result$pred.pred)
lines(result$actual)
lines(result$actual,col="red")
source('D:/Workspaces/kNN/src/classic-knn.R')
result <- test()
par(mfrow=c(1,2))
plot(result$pred,result$actual)
plot(result$pred)
lines(result$actual,col="red")
View(result)
View(result)
data <- arima.sim(list(ar=c(0.5,-0.2),ma=c(0,3,-0.1)),n=1000)
data
as.numeric(data)
loadData3 <- function() {
t <- 1:1000
data <- as.numeric(arima.sim(list(ar=c(0.5,-0.2),ma=c(0,3,-0.1)),n=1000))
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData3()
loadData3 <- function() {
t <- 1:1000
data <- as.numeric(arima.sim(list(ar=c(0.9,0.8,0.6,-0.1),
ma=c(0,3,-0.1)),n=1000))
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData3()
loadData3 <- function() {
t <- 1:1000
data <- as.numeric(arima.sim(list(ar=c(0.9,-0.1,0.3,-0.1),
ma=c(0,3,-0.1)),n=1000))
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData3()
loadData3 <- function() {
t <- 1:1000
data <- as.numeric(arima.sim(list(ar=c(0.95),
ma=c(0,3,-0.1)),n=1000))
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData3()
loadData3 <- function() {
t <- 1:1000
data <- as.numeric(arima.sim(list(ar=c(0.99),
ma=c(0,0.5,-0.3)),n=1000))
par(mfrow=c(1,1))
plot(data,type="l")
return(data)
}
data <- loadData3()
source('D:/Workspaces/kNN/src/classic-knn.R')
result <- test()
source('~/.active-rstudio-document')
result <- test()
rm <- lm(actual~pred,data=result)
rm
summary(m)
summary(rm)
plot(rm$residuals)
plot(rm$residuals^2)
install.packages("quantreg")
library(quantreg)
rq(actual~pred,data=result)
rmq <- rq(actual~pred,data=result)
summary(rmq)
rmq$coefficients
source('D:/Workspaces/kNN/src/classic-knn.R')
result <- test()
rm <- lm(actual~pred,data=result)
summary(rm)
source('D:/Workspaces/kNN/src/classic-knn.R')
data <- loadWN(1000)
result <- test()
rm <- lm(actual~pred,data=result)
summary(rm)
source('~/.active-rstudio-document')
data <- loadData3()
source('D:/Workspaces/kNN/src/classic-knn.R')
result <- test()
rm <- lm(actual~pred,data=result)
summary(rm)
library(forecast)
arm <- auto.arima(data[1:500])
arm.p <- predict(arm,n.ahead=500)
arm1 <- lm(result$actual~arm.p$pred)
summary(arm1)
arm1
arm
summary(arm1)
arm
plot(rm)
install.packages("XLConnect")
file.exists(NULL)
file.exists("")
character()
do.call(rnorm,10)
do.call(rnorm,list(n=10))
readData <- function(src,col,reader=read.csv,
header=FALSE,stringAsFactors=FALSE,
plot=TRUE,...) {
data <- reader(src,header=header,stringAsFactors=stringAsFactors,...)
if(plot) plot(data,type="l")
return(data)
}
simData <- function(n,fun,args,plot=T,...) {
t <- 1:n
data <- do.call(fun,c(n=n,args))
if(plot) plot(data,type="l")
return(data)
}
simData(10,rnorm,list())
simData <- function(n,fun=rnorm,args=list(),plot=T,...) {
t <- 1:n
data <- do.call(fun,c(n=n,args))
if(plot) plot(data,type="l")
return(data)
}
simData(10,arima.sim,list(model=list(ar=0.8)))
simData <- function(n,fun=rnorm,args=list(),plot=T) {
t <- 1:n
data <- as.numeric(do.call(fun,c(n=n,args)))
if(plot) plot(data,type="l")
return(data)
}
simData(10,arima.sim,list(model=list(ar=0.8)))
simData(10,arima.sim,list(model=list(ar=0.8)))
data <- simData(100,arima.sim,list(model=list(ar=0.8)))
is.numeric(NULL)
is.numeric(NA)
simData <- function(n=NA,fun=rnorm,args=list(),plot=T) {
t <- 1:n
if(is.numeric(n)) {
data <- as.numeric(do.call(fun,c(n=n,args)))
} else {
data <- as.numeric(do.call(fun,args))
}
if(plot) plot(data,type="l")
return(data)
}
data <- simData(NA,arima.sim,list(n=10,model=list(ar=0.8)))
simData <- function(n=NA,fun=rnorm,args=list(),plot=T) {
if(is.numeric(n)) {
data <- as.numeric(do.call(fun,c(n=n,args)))
} else {
data <- as.numeric(do.call(fun,args))
}
if(plot) plot(data,type="l")
return(data)
}
data <- simData(NA,arima.sim,list(n=10,model=list(ar=0.8)))
data <- simData(20,arima.sim,list(model=list(ar=0.8)))
data <- simData(2000,arima.sim,list(model=list(ar=0.8)))
data <- simData(2000,arima.sim,list(model=list(ar=0.99)))
data <- simData(2000,arima.sim,list(model=list(ar=0.99999)))
data <- simData(2000,arima.sim,list(model=list(ar=0.999)))
source('D:/Workspaces/kNN/src/classic-knn.R')
data <- simData(2000,fun=arima.sim,args=list(ar=c(0.85,-0.3),ma=c(0.2,-0.5)))
data <- simData(2000,fun=arima.sim,args=list(model=list(ar=c(0.85,-0.3),ma=c(0.2,-0.5))))
data <- simData(2000,fun=arima.sim,args=list(model=list(ar=c(0.95,-0.3),ma=c(0.2,-0.5))))
data <- simData(2000,fun=arima.sim,args=list(model=list(ar=c(0.95,0.95),ma=c(0.2,-0.5))))
data <- simData(2000,fun=arima.sim,args=list(model=list(ar=c(0.95,0.02),ma=c(0.2,-0.5))))
data <- simData(2000,fun=arima.sim,args=list(model=list(ar=c(0.95,0.02,0.01),ma=c(0.2,-0.5))))
test <- function() {
result <- kvalidate(data,1500,
hs=seq(20,30),k=500,n.ahead=1,min.cor=0)
par(mfrow=c(2,2))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
plot(result$pred,result$actual)
plot(result$pred)
lines(result$actual,col="red")
return(result)
}
test()
test <- function() {
result <- kvalidate(data,1500,
hs=seq(3,6),k=100,n.ahead=1,min.cor=0)
par(mfrow=c(2,2))
plot(density(result$mde),main="MDE")
plot(density(result$made),main="MADE")
plot(result$pred,result$actual)
plot(result$pred)
lines(result$actual,col="red")
return(result)
}
result <- test()
source('D:/Workspaces/kNN/src/classic-knn.R')
kAnalyze(result)
source('D:/Workspaces/kNN/src/classic-knn.R')
m <- kAnalyze(result)
summary(m)
source('D:/Workspaces/kNN/src/classic-knn.R')
source('D:/Workspaces/kNN/src/knn.R')
source('D:/Workspaces/kNN/src/knn.R')
data <- simData(1000,arima.sim,list(model=list(ar=0.95,ma=0.2)))
result <- kValidate(data,1600,seq(5,8),100,1,kPredict,kPredicts)
source('D:/Workspaces/kNN/src/knn.R')
result <- kValidate(data,1600,seq(5,8),100,1,kPredict,kPredicts)
result <- kValidate(data,800,seq(5,8),100,1,kPredict,kPredicts)
result <- kValidate(data,800,seq(5,8),100,1)
kPlot(result)
kAnalyze(result)
m <- kAnalyze(result)
summary(m)
data <- simData(5000,arima.sim,list(model=list(ar=c(0.95,0.1),ma=0.2)))
data <- simData(5000,arima.sim,list(model=list(ar=c(0.95,0.02),ma=0.2)))
data <- simData(5000,arima.sim,list(model=list(ar=c(0.9995,0.02),ma=0.2)))
data <- simData(5000,arima.sim,list(model=list(ar=c(0.9995),ma=0.2)))
data <- simData(5000,arima.sim,list(model=list(ar=c(0.9999995),ma=0.2)))
data <- simData(3000,arima.sim,list(model=list(ar=c(0.9999995),ma=0.2)))
result <- kValidate(data,2500,seq(5,8),120,1,kPredict,kPredicts)
result <- kValidate(data,2500,seq(5,8),120,1)
kPlot(result)
m <- kAnalyze(result)
summary(m)
View(result)
kAnalyze <- function(result) {
m <- lm(actual~pred+0,data=result)
par(mfrow=c(2,2))
summary(m)
plot(m)
return(m)
}
m <- kAnalyze(result)
summary(m)
plot(density(m$residuals))
shapiro.test(m$residuals)
Box.test(m$residuals)
Box.test(m$residuals)
acf(m$residuals)
pacf(m$residuals)
library(forecast)
mm <- auto.arima(result$pred-result$actual)
mm
# TODO: parallelize the method by passing functions as arguments
kValidate <- function(data,start,hs,k,n.ahead,min.cor=0,print.out=T) {
n <- length(data)
range <- start:(n-n.ahead)
valid <- sapply(range,function(i) {
vdata <- data[1:i]
result <- kPredicts(vdata,hs=hs,k=k,n.ahead=n.ahead,min.cor=min.cor)
pred <- result$pred$estimate["pred",]
actual <- data[(i+1):(i+n.ahead)]
residuals <- actual-pred
mde <- mean(residuals)
made <- mean(abs(residuals))
cor <- cor(pred,actual)
if(print.out) {
print(i)
}
return(c(pred,actual=actual,error=residuals,
mde=mde,made=made,cor=cor))
})
return(data.frame(t(valid)))
}
mm <- auto.arima(result$pred-result$actual)
mm
mm <- auto.arima(result$pred-result$actual,ic="bic")
mm
source('D:/Workspaces/kNN/src/knn.R')
result <- kValidate(data,2800,seq(5,8),120,1)
df1 <- data.frame(z=rnorm(100),x=rnorm(100)*2)
lm(z~x+x^2,data=df1)
lm(z~x+I(x^2),data=df1)
source('D:/Workspaces/kNN/src/knn.R')
result <- kValidate(data,2800,seq(5,8),120,1)
kPlot(result)
View(result)
kPlot(na.omit(result))
View(result)
result <- kValidate(data,2800,seq(5,8),250,1)
result <- kValidate(data,2800,10,250,1)
View(result)
kPlot(result)
m <- kAnalyze(result)
summary(m)
mm <- auto.arima(result$error.pred,ic="bic")
mm
shapiro.test(result$error.pred)
